#!/bin/bash

###################################################
#         -=The main DEB-Build loop=-             #
###################################################

# Global environment varible set
BUILD_SCRIPT_NAME="$0"
BUILD_SCRIPT_DIR=$(dirname "$BUILD_SCRIPT_NAME")
TMP_DIR="temp_dir"
DEB_CONF_DIR="config"

# Compiler varible set
SHARED_BASE="/data"
PACK_OUTPUT_DIR="/output"
GOLANG_VER="$(grep -e "^go\s" go.mod | awk '{print $2}')"
COMPILED_BINS_DIR="bins"
COMPILED_SHELLS_DIR="shells"
COMPILED_SQL_DIR="sqls"
GIT_REPO_URI="github.com/vpngen"
PROJECT_NAME="realm-admin"
PROJECT_ARCH="amd64"
PROJECT_PLATFORM="linux"
PROJECT_VERSION="0.0.1"
PROJECT_EPOCH=1

# Nfpm Varible set
NFPM_VER="v2.26.0"
NFPM_CONFIG_FILE_NAME="nfpm.yaml"
TARGET_PACKAGE="deb"
DEB_MAINTAINER_MAIL="mix.djoker@gmail.com"
DEB_MAINTAINER="Mix dJoker <$DEB_MAINTAINER_MAIL>"
BIN_INSTALL_PATH="/usr/bin/"
SHELL_INSTALL_PATH="/usr/bin/"
INSTALLATION_TEMP_DIR="${PROJECT_NAME}_${TMP_DIR}"

# DEB-installation Varible set
PREINSTALL_SCRIPT_NAME="preinstall.sh"
POSTINSTALL_SCRIPT_NAME="postinstall.sh"

# Debug
DEBUG_MODE="true"

# doBinCompile - BASH-script tht compile and install every main.go recursevly in `${CMD_DIR}`
function doBinCompile {

  GO_BINS="$GOPATH/bin"
  OUTPUT_DIR="$TMP_DIR/$COMPILED_BINS_DIR"

  set -e
  
  # Check the $TMP_DIR exists
  if [ ! -d "$TMP_DIR" ]; then
    echo " [!] No tempory dir. Exiting"
    exit 1
  fi

  echo " [+] Create temp dir for bins: $OUTPUT_DIR"
  $BUILD_SCRIPT_NAME makeTemp $OUTPUT_DIR
  # chown "$USER_UID":"$USER_UID" $OUTPUT_DIR
  
  # Git connection set
  ssh-keyscan -t rsa github.com >> /etc/ssh/ssh_known_hosts
  git config --global url."ssh://git@github.com/".insteadOf "https://github.com/"
  
  # Setup Go Env
  go env -w GOPRIVATE=github.com/vpngen

  echo " [+] Recursavle compile bins from $CMD_DIR"
  MAINGO_LIST=$(find "$CMD_DIR/" -type f -name "main.go")
  for mainGo in $MAINGO_LIST; do
    progPath=$(dirname "$mainGo")
    compileURI="$GIT_REPO_URI/$PROJECT_NAME/$progPath"
    
    # In debug mode - don't do compile
    if [[ $DEBUG_MODE == "true" ]]; then
      echo " ==== [!] DEBUG ===="
      echo "  [+] compileURI = $compileURI"
      echo "  [+] progPath   = $progPath"

      # Debug file generator plug
      debugExecFile="$GO_BINS"/"$(basename "$progPath")"
      echo "1" > "$debugExecFile"
      chmod u+x "$debugExecFile"
    else
      #go install "$compileURI"@"$BRANCH"
      go build -o "$GO_BINS" "$mainGo"
    fi
    # Debug End  
  done

  # chown -R "$USER_UID":"$USER_UID" "$GO_BINS"/
  find "$GO_BINS" -type f -exec mv {} "$OUTPUT_DIR" \;
} 

function doShellCompile {
  OUTPUT_DIR="$TMP_DIR/$COMPILED_SHELLS_DIR"

  set -e

  # Check the $TMP_DIR exists
  if [ ! -d "$TMP_DIR" ]; then
  echo " [!] No tempory dir. Exiting"
    exit 1
  fi

  echo " [+] Create temp dir for shells: $OUTPUT_DIR"
  $BUILD_SCRIPT_NAME makeTemp $OUTPUT_DIR

  echo " [+] Start copping the shells scripts"
  find "$CMD_DIR/" -type f -name "*.sh" -exec cp {} $OUTPUT_DIR/ \;
}

function doDBInitCompile {
  OUTPUT_DIR="$TMP_DIR/$COMPILED_SQL_DIR"

  set -e

  # Check the $TMP_DIR exists
  if [ ! -d "$TMP_DIR" ]; then
  echo " [!] No tempory dir. Exiting"
    exit 1
  fi

  echo " [+] Create temp dir for SQLs: $OUTPUT_DIR"
  $BUILD_SCRIPT_NAME makeTemp $OUTPUT_DIR

  echo " [+] Start copping the SQLs scripts"
  find "./" -type f -name "*.sql" -exec cp {} $OUTPUT_DIR/ \;

}

# doRunCompiler - run Go Docker and compile
function doRunCompiler {

  BRANCH="$(git rev-parse --abbrev-ref HEAD)"
  CMD_DIR="cmd"
  AUTH_KEY=$(cat "$HOME"/.ssh/id_rsa.pub)

  docker run --rm \
    -v "$(readlink -f "$SSH_AUTH_SOCK")":/ssh-agent \
    -e SSH_AUTH_SOCK=/ssh-agent \
    -e AUTH_KEY="${AUTH_KEY}" \
    -e CMD_DIR="${CMD_DIR:-"cmd"}" \
    -e USER_UID="$(id -u)" \
    -e CGO_ENABLED=0 \
    -e BRANCH="${BRANCH:-"latest"}" \
    -e TMP_DIR="${TMP_DIR:-".tmp"}" \
    -v "${PWD}":"${SHARED_BASE}" \
    -w "${SHARED_BASE}" \
    golang:"$GOLANG_VER" "${BUILD_SCRIPT_NAME}" compile
}

# doNfpmConfigure - make Nfpm configuration file
function doNfpmConfigure {
  confDirPath=$TMP_DIR/$DEB_CONF_DIR
  $BUILD_SCRIPT_NAME makeTemp "$confDirPath"
  
  cp "$BUILD_SCRIPT_DIR"/$PREINSTALL_SCRIPT_NAME $confDirPath/
  cp "$BUILD_SCRIPT_DIR"/$POSTINSTALL_SCRIPT_NAME $confDirPath/

  cat <<EOF >"$confDirPath/$NFPM_CONFIG_FILE_NAME"
name: "$PROJECT_NAME"
arch: "$PROJECT_ARCH"
platform: "$PROJECT_PLATFORM"
version: $PROJECT_VERSION
epoch: $PROJECT_EPOCH
section: "default"
priority: "extra"
provides:
  - $PROJECT_NAME
  - 
depends:
  - postgresql
  - postgresql-contrib
maintainer: "$DEB_MAINTAINER"
description: |
  The set of the VPNGen Data Center managers
vendor: "VPNGen"
homepage: "http://vpngen.org"
contents:
  - src: ${SHARED_BASE}/${COMPILED_BINS_DIR}
    dst: ${BIN_INSTALL_PATH}
    file_info:
      mode: 0700
      owner: root
      group: root
  - src: ${SHARED_BASE}/${COMPILED_SHELLS_DIR}
    dst: ${SHELL_INSTALL_PATH}
    file_info:
      mode: 0700
      owner: root
      group: root
  - src: ${SHARED_BASE}/${COMPILED_SQL_DIR}
    dst: /tmp/${INSTALLATION_TEMP_DIR}/sql
overrides:
  deb:
    scripts:
      preinstall: ./${DEB_CONF_DIR}/${PREINSTALL_SCRIPT_NAME}
      postinstall: ${DEB_CONF_DIR}/${POSTINSTALL_SCRIPT_NAME}
      # preremove: ${DEB_CONF_DIR}/${PREREMOVE_SCRIPT_NAME}
      # postremove: ${DEB_CONF_DIR}/${POSTREMOVE_SCRIPT_NAME}
deb:
  compression: xz
  fields:
   Pre-Depends: postgresql 
EOF

}

# doBuild - Build DEB-package
function doBuild {
  doNfpmConfigure

  docker run --rm \
    -v "${PWD}/${TMP_DIR}":${SHARED_BASE} \
    -v "${PWD}":${PACK_OUTPUT_DIR} \
    -w ${SHARED_BASE} \
    goreleaser/nfpm:"${NFPM_VER}" package \
    --config "${SHARED_BASE}/${DEB_CONF_DIR}/${NFPM_CONFIG_FILE_NAME}" \
    --target "${PACK_OUTPUT_DIR}" \
    --packager ${TARGET_PACKAGE}
}

# doMakeTempDir - create template dir
function doMakeTempDir {
  targetDir=$1

  if [ ! -d "$targetDir" ]; then
    mkdir -p "$targetDir"
  fi
}

# doDeleteTempDir - deleting tempory directory
function doDeleteTempDir {
  targetDir=$1

  if [ -d "$targetDir" ]; then
      rm -rf "$targetDir"
  fi
}

function mainFunc {
    echo " [+] Making tempory directory ..."
    $BUILD_SCRIPT_NAME makeTemp $TMP_DIR

    echo " [+] Starting compiling procedure..."
    $BUILD_SCRIPT_NAME runCompiler
    
    echo " [+] Starting building procedure..."
    $BUILD_SCRIPT_NAME build
    
    #echo " [+] Clearning tempory files..."
    #$BUILD_SCRIPT_NAME deleteTemp $TMP_DIR

}

# Main entry point
case $1 in 
  "runCompiler")
    doRunCompiler
    doShellCompile
    doDBInitCompile
    exit 0
    ;; 

  "compile")
    doBinCompile
    exit 0
    ;;

  "build")
    doBuild
    exit 0
    ;;

  "deleteTemp")
    shift
    doDeleteTempDir "$@"
    exit 0
    ;;

  "makeTemp")
    shift
    doMakeTempDir "$@"
    exit 0
    ;;
  
  "debug")
    echo "PWD: $PWD"
    echo "USER_UID: $USER_UID"
    echo "SSH_AUTH_SOCK: $SSH_AUTH_SOCK"
    echo "BUILD_SCRIPT_NAME: $BUILD_SCRIPT_NAME"
    echo "SHARED_BASE: $SHARED_BASE"
    echo "GOLANG_VER: $GOLANG_VER"
    echo "CMD_DIR: $CMD_DIR"
    echo "BRANCH: $BRANCH"
    echo "AUTH_KEY: $AUTH_KEY=$(cat "$HOME"/.ssh/id_rsa.pub)"
    echo "BUILD_SCRIPT_DIR: $BUILD_SCRIPT_DIR"
    ls -l "$PWD"

    exit 0
    ;;
 
  *)
    mainFunc
esac

